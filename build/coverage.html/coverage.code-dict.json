{"/home/travis/build/npmtest/node-npmtest-banking/test.js":"/* istanbul instrument in package npmtest_banking */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-banking/lib.npmtest_banking.js":"/* istanbul instrument in package npmtest_banking */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_banking = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_banking = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-banking/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-banking && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_banking */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_banking\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_banking.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_banking.rollup.js'] =\n            local.assetsDict['/assets.npmtest_banking.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_banking.__dirname + '/lib.npmtest_banking.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-banking/node_modules/banking/lib/banking.js":"\n/*!\n * banking.js\n */\n\n/**\n * [request description]\n * @type {[type]}\n */\n\nvar request = require('superagent')\n  , fs = require('fs')\n  , ofx = require('./ofx')\n  , pkg = require('../package')\n  , util = require('./utils')\n  , debug = require('debug')('banking:main');\n\n\n/**\n * expose Banking\n */\n\nmodule.exports = Banking;\n\n/**\n * [Banking description]\n * @param {[type]} args [description]\n */\n\nfunction Banking(args){\n  if (!(this instanceof Banking)) return new Banking(args);\n  this.opts = {\n    fid: args.fid,\n    fidOrg: args.fidOrg || '',\n    url: args.url,\n    bankId: args.bankId || '', /* If bank account use your bank routing number otherwise set to null */\n    user: args.user,\n    password: args.password,\n    accId: args.accId,  /* Account Number */\n    brokerId: args.brokerId, /* For investment accounts */\n    accType: args.accType,\n    appVer: args.appVer || '1700',\n    ofxVer: args.ofxVer || '102',\n    app: args.app || 'QWIN'\n  };\n}\n\n/**\n * [version description]\n */\n\nBanking.version = pkg.version;\n\n/**\n * [parseFile description]\n * @param  {[type]}   file [description]\n * @param  {Function} fn   [description]\n * @return {[type]}        [description]\n */\n\nBanking.parseFile = function(file, fn) {\n  fs.readFile(file, 'utf8', function (err, data) {\n    if (err) throw new Error(err);\n    ofx.parse(data, function (res){\n      fn(res);\n    });\n  });\n};\n\n/**\n * [parse description]\n * @param  {[type]}   str [description]\n * @param  {Function} fn  [description]\n * @return {[type]}       [description]\n */\n\nBanking.parse = function(str, fn){\n  ofx.parse(str, function (res){\n    fn(res);\n  });\n};\n\n/**\n * Fetches Ofx String from Bank Server and parse to json or returns valid XML\n *\n * @param {JSON} o Request Config Settings\n * @param {String} format (Options are 'xml' || 'json' if omitted defaults to 'json')\n * @param {Function} cb\n * @return {XML|JSON}\n * @api public\n */\n\nBanking.prototype.getStatement = function(args, fn) {\n  var opts = util.mixin(this.opts, args);\n  var ofxReq = ofx.createRequest(opts);\n\n  var req = request\n    .post(this.opts.url)\n    .type('application/x-ofx')\n    .set({'User-Agent' : 'banking-js'})\n    .set({'Accept' : 'application/ofx'})\n    .send(ofxReq)\n    .buffer()\n\n  if (!fn) return req;\n\n  req\n    .end(function (err, res){\n      debug('Raw-Response:', res.text);\n      if (!res.ok || res.error) return fn(true, res.text);\n      ofx.parse(res.text, function(ofxObj){\n        fn(false, ofxObj);\n      });\n    });\n};\n","/home/travis/build/npmtest/node-npmtest-banking/node_modules/banking/lib/ofx.js":"\n/*!\n * [OFX description]\n * @type {[type]}\n */\n\nvar parser = new require('xml2js').Parser({explicitArray: false})\n  , util = require('./utils')\n  , debug = require('debug')('banking:ofx');\n\n// expose OFX\n\nvar OFX = module.exports = {};\n\nfunction getSignOnMsg(opts) {\n  return '<SIGNONMSGSRQV1>' +\n        '<SONRQ>' +\n        '<DTCLIENT>' + opts.end +\n        '<USERID>' + opts.user +\n        '<USERPASS>' + opts.password +\n        '<LANGUAGE>ENG' +\n        '<FI>' +\n        '<ORG>' + opts.fidOrg +\n        '<FID>' + opts.fid +\n        '</FI>' +\n        '<APPID>' + opts.app +\n        '<APPVER>' + opts.appVer +\n        '</SONRQ>' +\n        '</SIGNONMSGSRQV1>';\n}\n\nfunction getOfxHeaders(opts) {\n  return 'OFXHEADER:100\\r\\n' +\n         'DATA:OFXSGML\\r\\n' +\n         'VERSION:'+opts.ofxVer+'\\r\\n' +\n         'SECURITY:NONE\\r\\n' +\n         'ENCODING:USASCII\\r\\n' +\n         'CHARSET:1252\\r\\n' +\n         'COMPRESSION:NONE\\r\\n' +\n         'OLDFILEUID:NONE\\r\\n' +\n         'NEWFILEUID:' + util.uuid(32) + '\\r\\n' +\n         '\\r\\n';\n}\n\n\n/**\n * [createRequest description]\n * @param  {[type]} opts [description]\n * @return {[type]}      [description]\n */\n\nOFX.createRequest = function(opts) {\n  var type = (opts.accType || '').toUpperCase();\n  //TODO join ofxReq and ofxReqCC not sure why I seperated in the first place\n  //Request for Bank statement\n  if (type === 'INVESTMENT') {\n    var reqStr = getOfxHeaders(opts) +\n      '<OFX>' +\n      getSignOnMsg(opts) +\n      '<INVSTMTMSGSRQV1>' +\n      '<INVSTMTTRNRQ>' +\n      '<TRNUID>' + util.uuid(32) +\n      '<CLTCOOKIE>' + util.uuid(5) +\n      '<INVSTMTRQ>' +\n      '<INVACCTFROM>' +\n      '<BROKERID>' + opts.brokerId +\n      '<ACCTID>' + opts.accId +\n      '</INVACCTFROM>' +\n      '<INCTRAN>' +\n      '<DTSTART>' + opts.start +\n      (typeof opts.end !== 'undefined' ? '<DTEND>' + opts.end : '') +\n      '<INCLUDE>Y</INCTRAN>' +\n      '<INCOO>Y' +\n      '<INCPOS>' +\n      '<INCLUDE>Y' +\n      '</INCPOS>' +\n      '<INCBAL>Y' +\n      '</INVSTMTRQ>' +\n      '</INVSTMTTRNRQ>' +\n      '</INVSTMTMSGSRQV1>' +\n      '</OFX>';\n  } else\n  if (type != 'CREDITCARD') {\n    var reqStr = getOfxHeaders(opts) +\n      '<OFX>' +\n      getSignOnMsg(opts) +\n      '<BANKMSGSRQV1>' +\n      '<STMTTRNRQ>' +\n      '<TRNUID>' + util.uuid(32) +\n      '<CLTCOOKIE>' + util.uuid(5) +\n      '<STMTRQ>' +\n      '<BANKACCTFROM>' +\n      '<BANKID>' + opts.bankId +\n      '<ACCTID>' + opts.accId +\n      '<ACCTTYPE>' + type +\n      '</BANKACCTFROM>' +\n      '<INCTRAN>' +\n      '<DTSTART>' + opts.start +\n      (typeof opts.end !== 'undefined' ? '<DTEND>' + opts.end : '') +\n      '<INCLUDE>Y</INCTRAN>' +\n      '</STMTRQ>' +\n      '</STMTTRNRQ>' +\n      '</BANKMSGSRQV1>' +\n      '</OFX>';\n  } else {\n    //Request for CreditCard Statement\n    var reqStr = getOfxHeaders(opts) +\n      '<OFX>' +\n      getSignOnMsg(opts) +\n      '<CREDITCARDMSGSRQV1>' +\n      '<CCSTMTTRNRQ>' +\n      '<TRNUID>' + util.uuid(32) +\n      '<CLTCOOKIE>' + util.uuid(5) +\n      '<CCSTMTRQ>' +\n      '<CCACCTFROM>' +\n      '<ACCTID>' + opts.accId +\n      '</CCACCTFROM>' +\n      '<INCTRAN>' +\n      '<DTSTART>' + opts.start +\n      (typeof opts.end !== 'undefined' ? '<DTEND>' + opts.end : '') +\n      '<INCLUDE>Y</INCTRAN>' +\n      '</CCSTMTRQ>' +\n      '</CCSTMTTRNRQ>' +\n      '</CREDITCARDMSGSRQV1>' +\n      '</OFX>';\n  }\n  debug('OFX-RequestString:', reqStr);\n  return reqStr;\n};\n\n/**\n * [parse description]\n * @param  {[type]}   ofxData [description]\n * @param  {Function} fn      [description]\n * @return {[type]}           [description]\n */\n\nOFX.parse = function (ofxStr, fn) {\n  var data = {};\n  var callback = fn;\n  var ofxRes = ofxStr.split('<OFX>',2);\n  var ofx = '<OFX>' + ofxRes[1];\n  var headerString = ofxRes[0].split(/\\r|\\n/);\n\n  data.xml = ofx\n              // Remove empty spaces and line breaks between tags\n              .replace(/>\\s+</g, '><')\n              // Remove empty spaces and line breaks before tags content\n              .replace(/\\s+</g, '<')\n              // Remove empty spaces and line breaks after tags content\n              .replace(/>\\s+/g, '>')\n              // Remove dots in start-tags names and remove end-tags with dots\n              .replace(/<([A-Z0-9_]*)+\\.+([A-Z0-9_]*)>([^<]+)(<\\/\\1\\.\\2>)?/g, '<\\$1\\$2>\\$3' )\n              // Add a new end-tags for the ofx elements\n              .replace(/<(\\w+?)>([^<]+)/g, '<\\$1>\\$2</<added>\\$1>')\n              // Remove duplicate end-tags\n              .replace(/<\\/<added>(\\w+?)>(<\\/\\1>)?/g, '</\\$1>');\n\n    parser.parseString(data.xml, function (err, result) {\n      data.body = result;\n    });\n\n  data.header = {};\n\n  for(var key in headerString){\n    if (typeof headerString[key] === \"string\"){\n      var headAttributes = headerString[key].split(/:/,2);\n    }\n    if (headAttributes[0]) data.header[headAttributes[0]] = headAttributes[1];\n  }\n  fn(data);\n};\n","/home/travis/build/npmtest/node-npmtest-banking/node_modules/banking/lib/utils.js":"\n\n/**\n * Unique Id Generator\n *\n * @param {number} length\n * @return {string} radix\n * @return {string} uuid\n * @api private\n */\n\nvar Util = module.exports = {};\n\nUtil.uuid = function(len,radix) {\n    var CHARS = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split('');\n    var chars = CHARS, uuid = [];\n    radix = radix || chars.length;\n\n    if (len) {\n      for (var i = 0; i < len; i++) uuid[i] = chars[0 | Math.random()*radix];\n    } else {\n      var r;\n      uuid[8] = uuid[13] = uuid[18] = uuid[23] = '-';\n      uuid[14] = '4';\n\n      for (var i = 0; i < 36; i++) {\n        if (!uuid[i]) {\n          r = 0 | Math.random()*16;\n          uuid[i] = chars[(i == 19) ? (r & 0x3) | 0x8 : r];\n        }\n      }\n    }\n\n    return uuid.join('');\n};\n\n/**\n * [mixin description]\n * @param  {[type]} base [description]\n * @param  {[type]} obj  [description]\n * @return {[type]}      [description]\n */\n\nUtil.mixin = function (base, obj) {\n  for (var key in base) {\n    obj[key] = (obj[key]) ? obj[key] : base[key];\n  }\n  return obj;\n}\n","/home/travis/build/npmtest/node-npmtest-banking/node_modules/banking/index.js":"\nmodule.exports = require('./lib/banking')\n"}